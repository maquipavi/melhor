import streamlit as st
import asyncio
import os
from datetime import datetime
import pandas as pd
import re
import warnings
from google import genai
from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types

# Configura√ß√µes da p√°gina
st.set_page_config(
    page_title="An√°lise de Personalidade e Prop√≥sito de Vida",
    page_icon="üöÄ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    
    .agent-card {
        background: #f8f9fa;
        padding: 1.5rem;
        border-radius: 10px;
        border-left: 4px solid #667eea;
        margin: 1rem 0;
    }
    
    .success-message {
        background: #d4edda;
        color: #155724;
        padding: 1rem;
        border-radius: 5px;
        border: 1px solid #c3e6cb;
        margin: 1rem 0;
    }
    
    .analysis-section {
        background: white;
        padding: 2rem;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

# Configura√ß√µes e inicializa√ß√£o
warnings.filterwarnings("ignore")

@st.cache_resource
def initialize_services():
    """Inicializa os servi√ßos necess√°rios"""
    # Configurar API Key (voc√™ deve definir isso como uma vari√°vel de ambiente ou secret)
    api_key = st.secrets.get("GOOGLE_API_KEY", "AIzaSyBarB5CfRsl_M0nkQjgg-ystWV-CyzN0jU")
    os.environ["GOOGLE_API_KEY"] = api_key
    
    # Configurar cliente
    client = genai.Client()
    
    # Modelos
    MODELO_RAPIDO = "gemini-2.0-flash"
    MODELO_ROBUSTO = "gemini-2.0-flash"
    
    # Servi√ßo de sess√£o
    session_service = InMemorySessionService()
    
    return client, MODELO_RAPIDO, MODELO_ROBUSTO, session_service

# Fun√ß√£o auxiliar para chamar agentes
async def call_agent(agent: Agent, message_text: str, session_service) -> str:
    """Chama um agente e retorna a resposta"""
    session = await session_service.create_session(app_name=agent.name, user_id="user1")
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    async for event in runner.run_async(user_id="user1", session_id=session.id, new_message=content):
        if event.is_final_response():
            for part in event.content.parts:
                if part.text is not None:
                    final_response += part.text
                    final_response += "\n"
    return final_response

# Agente 1: Analisador de Nascimento
async def agente_analisador(data_nascimento, modelo_rapido, session_service):
    """Agente que analisa personalidade baseada na data de nascimento"""
    analisador = Agent(
        name="agente_analisador",
        model=modelo_rapido,
        instruction="""
        Voc√™ √© um analista de personalidade e prop√≥sito de vida com base na data de nascimento.
        Sua tarefa √© fornecer an√°lises profundas e precisas sobre a personalidade, padr√µes emocionais,
        caminhos de carreira e desafios pessoais com base na data de nascimento fornecida.
        Use a ferramenta de busca do Google (google_search) para obter informa√ß√µes relevantes e
        garantir que as an√°lises sejam fundamentadas e √∫teis.
        """,
        description="Agente que analisa a personalidade e o prop√≥sito de vida com base na data de nascimento",
        tools=[google_search]
    )

    entrada_do_agente_analisador = f"""
    Data de Nascimento: {data_nascimento}

    Realize as seguintes an√°lises:

    1. Decodificador de Personalidade pela Data de Nascimento
    "Com base na data de nascimento {data_nascimento}, descreva meus pontos fortes naturais, padr√µes emocionais e como me comporto em relacionamentos ‚Äî que seja profundo, espec√≠fico e psicologicamente preciso."

    2. Roteiro da Inf√¢ncia
    "Usando a data de nascimento {data_nascimento}, escreva um perfil psicol√≥gico de como minha inf√¢ncia moldou minha personalidade, h√°bitos e tomada de decis√µes hoje ‚Äî seja gentil, mas revelador."

    3. Analisador de Prop√≥sito Profissional
    "Dada a data de nascimento {data_nascimento}, quais caminhos de carreira combinam com meus tra√ßos de personalidade, valores e talentos naturais? Sugira √°reas, fun√ß√µes e ambientes de trabalho."

    4. Detector de Auto-Sabotagem
    "Com base na data {data_nascimento}, quais s√£o meus h√°bitos de auto-sabotagem mais prov√°veis e como eles aparecem no dia a dia? D√™ solu√ß√µes pr√°ticas com base na psicologia."

    5. Mapa de Gatilhos Emocionais
    "Usando a data de nascimento {data_nascimento}, explique o que geralmente me desencadeia emocionalmente, como eu costumo reagir e como posso desenvolver resili√™ncia emocional em torno desses padr√µes."

    6. Escaneamento de Energia nos Relacionamentos
    "Com base na data de nascimento {data_nascimento}, descreva como eu dou e recebo amor, o que preciso de um parceiro e que tipo de pessoa eu naturalmente atraio."
    """

    return await call_agent(analisador, entrada_do_agente_analisador, session_service)

# Agente 2: Identificador de Melhorias
async def agente_melhorias(data_nascimento, analises_agente1, modelo_rapido, session_service):
    """Agente que identifica pontos de melhoria"""
    melhorias = Agent(
        name="agente_melhorias",
        model=modelo_rapido,
        instruction="""
        Voc√™ √© um consultor de desenvolvimento pessoal. Sua tarefa √© analisar as an√°lises fornecidas
        pelo Agente 1 (analisador de nascimento) e identificar √°reas de melhoria em cada uma das seis
        categorias. Seja espec√≠fico e forne√ßa sugest√µes pr√°ticas para o desenvolvimento pessoal.
        """,
        description="Agente que identifica pontos de melhoria nas an√°lises do Agente 1",
        tools=[google_search]
    )

    entrada_do_agente_melhorias = f"""
    Data de Nascimento: {data_nascimento}
    An√°lises do Agente 1: {analises_agente1}

    Para cada uma das seis an√°lises fornecidas pelo Agente 1, identifique √°reas de melhoria e
    forne√ßa sugest√µes pr√°ticas para o desenvolvimento pessoal.
    """

    return await call_agent(melhorias, entrada_do_agente_melhorias, session_service)

# Agente 3: Buscador de Pessoas de Sucesso
async def agente_buscador_sucesso(data_nascimento, modelo_robusto, session_service):
    """Agente que busca pessoas de sucesso nascidas na mesma data"""
    buscador_sucesso = Agent(
        name="agente_buscador_sucesso",
        model=modelo_robusto,
        instruction="""
        Voc√™ √© um pesquisador de pessoas de sucesso brasileiras. Sua tarefa √© buscar na internet 5 homens e 5 mulheres
        que nasceram na mesma data fornecida e que alcan√ßaram sucesso em suas √°reas de atua√ß√£o, e que sejam brasileiros.
        Monte uma tabela com as seguintes colunas: nome, profiss√£o, no que a pessoa tem sucesso e site da informa√ß√£o.
        Ao realizar a busca no Google, certifique-se de incluir o termo "brasileiro" ou "brasileira" para garantir que os resultados sejam apenas de pessoas do Brasil.
        Use a ferramenta de busca do Google (google_search) para encontrar as informa√ß√µes e o site de onde tirou a informa√ß√£o.
        """,
        description="Agente que busca pessoas de sucesso nascidas na mesma data",
        tools=[google_search]
    )

    entrada_do_agente_buscador_sucesso = f"""
    Data de Nascimento: {data_nascimento}

    Busque na internet 5 homens e 5 mulheres que nasceram na mesma data e que alcan√ßaram sucesso
    em suas √°reas de atua√ß√£o e que sejam brasileiros. Monte uma tabela com as seguintes colunas:
    nome, profiss√£o, no que a pessoa tem sucesso e site da informa√ß√£o. Ao realizar a busca no Google, certifique-se de incluir o termo "brasileiro" ou "brasileira" para garantir que os resultados sejam apenas de pessoas do Brasil. Seja claro e objetivo
    """

    tabela_sucesso = await call_agent(buscador_sucesso, entrada_do_agente_buscador_sucesso, session_service)
    
    # Processar a tabela para DataFrame
    try:
        data_lines = tabela_sucesso.strip().split('\n')
        header_index = -1
        
        for i, line in enumerate(data_lines):
            if "Nome" in line and "Profiss√£o" in line and "Sucesso" in line and "Site da Informa√ß√£o" in line:
                header_index = i
                break

        data = []
        if header_index != -1:
            for line in data_lines[header_index+2:]:
                if line.strip() and '|' in line:
                    values = re.split(r"\|", line.strip())
                    cleaned_values = [v.strip() for v in values if v.strip()]
                    
                    if len(cleaned_values) >= 4:
                        nome, profissao, sucesso, site = cleaned_values[:4]
                        data.append([nome, profissao, sucesso, site])
                    elif len(cleaned_values) > 0:
                        data.append(cleaned_values + [''] * (4 - len(cleaned_values)))

        df = pd.DataFrame(data, columns=["Nome", "Profiss√£o", "Sucesso", "Site da Informa√ß√£o"])
        return df, tabela_sucesso
    except Exception as e:
        st.error(f"Erro ao processar tabela: {e}")
        return pd.DataFrame(), tabela_sucesso

# Agente 4: Gerador de Relat√≥rio Final
async def agente_relatorio_final(data_nascimento, analises, melhorias, tabela_sucesso, modelo_rapido, session_service):
    """Agente que gera o relat√≥rio final"""
    relatorio = Agent(
        name="agente_relatorio",
        model=modelo_rapido,
        instruction="""
        Voc√™ √© um gerador de relat√≥rios finais. Sua tarefa √© combinar as an√°lises do Agente 1,
        os pontos de melhoria do Agente 2 e a tabela de pessoas de sucesso do Agente 3 em um
        relat√≥rio final otimista e motivador. Conclua o relat√≥rio com uma mensagem de incentivo.
        """,
        description="Agente que gera o relat√≥rio final"
    )

    entrada_do_agente_relatorio = f"""
    Data de Nascimento: {data_nascimento}
    An√°lises do Agente 1: {analises}
    Pontos de Melhoria do Agente 2: {melhorias}
    Tabela de Pessoas de Sucesso do Agente 3: {tabela_sucesso}

    Combine as informa√ß√µes acima em um relat√≥rio final otimista e motivador.
    Conclua o relat√≥rio com uma mensagem de incentivo.
    """

    return await call_agent(relatorio, entrada_do_agente_relatorio, session_service)

# Fun√ß√£o principal para executar a an√°lise
async def executar_analise_completa(data_nascimento):
    """Executa todo o sistema de an√°lise"""
    try:
        client, modelo_rapido, modelo_robusto, session_service = initialize_services()
        
        # Execu√ß√£o sequencial dos agentes
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        # Agente 1
        status_text.text("üîç Executando an√°lise de personalidade...")
        progress_bar.progress(0.25)
        analises_agente1 = await agente_analisador(data_nascimento, modelo_rapido, session_service)
        
        # Agente 2
        status_text.text("üìà Identificando pontos de melhoria...")
        progress_bar.progress(0.50)
        pontos_de_melhoria = await agente_melhorias(data_nascimento, analises_agente1, modelo_rapido, session_service)
        
        # Agente 3
        status_text.text("üåü Buscando pessoas de sucesso...")
        progress_bar.progress(0.75)
        df_sucesso, tabela_sucesso_raw = await agente_buscador_sucesso(data_nascimento, modelo_robusto, session_service)
        
        # Agente 4
        status_text.text("üìã Gerando relat√≥rio final...")
        progress_bar.progress(0.90)
        relatorio_final = await agente_relatorio_final(data_nascimento, analises_agente1, pontos_de_melhoria, tabela_sucesso_raw, modelo_rapido, session_service)
        
        progress_bar.progress(1.0)
        status_text.text("‚úÖ An√°lise conclu√≠da!")
        
        return analises_agente1, pontos_de_melhoria, df_sucesso, relatorio_final
        
    except Exception as e:
        st.error(f"Erro durante a an√°lise: {str(e)}")
        return None, None, None, None

# Interface principal
def main():
    """Fun√ß√£o principal da aplica√ß√£o Streamlit"""
    
    # Header
    st.markdown("""
    <div class="main-header">
        <h1>üöÄ Sistema de An√°lise de Personalidade e Prop√≥sito de Vida</h1>
        <p>Descubra insights profundos sobre sua personalidade baseados na sua data de nascimento</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Sidebar
    st.sidebar.title("üéØ Configura√ß√µes")
    st.sidebar.markdown("### Como funciona:")
    st.sidebar.markdown("""
    1. **Digite sua data de nascimento**
    2. **Clique em 'Iniciar An√°lise'**
    3. **Aguarde os 4 agentes trabalharem:**
       - üîç Analisador de Personalidade
       - üìà Identificador de Melhorias
       - üåü Buscador de Pessoas de Sucesso
       - üìã Gerador de Relat√≥rio Final
    """)
    
    # Input da data de nascimento
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.markdown("### üìÖ Sua Data de Nascimento")
        data_nascimento = st.date_input(
            "Selecione sua data de nascimento:",
            value=datetime(1990, 1, 1),
            min_value=datetime(1900, 1, 1),
            max_value=datetime.now()
        )
        
        data_formatada = data_nascimento.strftime('%d/%m/%Y')
        
        if st.button("üöÄ Iniciar An√°lise Completa", type="primary", use_container_width=True):
            st.session_state.executar_analise = True
            st.session_state.data_nascimento = data_formatada
    
    # Executar an√°lise se solicitado
    if st.session_state.get('executar_analise', False):
        data_para_analise = st.session_state.get('data_nascimento', data_formatada)
        
        st.markdown(f"""
        <div class="success-message">
            <strong>‚úÖ An√°lise iniciada para: {data_para_analise}</strong><br>
            Aguarde enquanto nossos agentes especializados trabalham para voc√™...
        </div>
        """, unsafe_allow_html=True)
        
        # Executar an√°lise
        analises, melhorias, df_sucesso, relatorio = asyncio.run(
            executar_analise_completa(data_para_analise)
        )
        
        if analises:
            # Exibir resultados
            st.markdown("## üìä Resultados da An√°lise")
            
            # Criar tabs para organizar os resultados
            tab1, tab2, tab3, tab4 = st.tabs([
                "üîç An√°lise de Personalidade", 
                "üìà Pontos de Melhoria", 
                "üåü Pessoas de Sucesso", 
                "üìã Relat√≥rio Final"
            ])
            
            with tab1:
                st.markdown('<div class="analysis-section">', unsafe_allow_html=True)
                st.markdown("### üîç An√°lise Detalhada de Personalidade")
                st.markdown(analises)
                st.markdown('</div>', unsafe_allow_html=True)
            
            with tab2:
                st.markdown('<div class="analysis-section">', unsafe_allow_html=True)
                st.markdown("### üìà √Åreas de Melhoria e Desenvolvimento")
                st.markdown(melhorias)
                st.markdown('</div>', unsafe_allow_html=True)
            
            with tab3:
                st.markdown('<div class="analysis-section">', unsafe_allow_html=True)
                st.markdown("### üåü Pessoas de Sucesso - Mesma Data de Nascimento")
                if not df_sucesso.empty:
                    st.dataframe(df_sucesso, use_container_width=True)
                else:
                    st.info("N√£o foram encontradas pessoas de sucesso para esta data espec√≠fica.")
                st.markdown('</div>', unsafe_allow_html=True)
            
            with tab4:
                st.markdown('<div class="analysis-section">', unsafe_allow_html=True)
                st.markdown("### üìã Relat√≥rio Final Motivacional")
                st.markdown(relatorio)
                st.markdown('</div>', unsafe_allow_html=True)
            
            # Bot√£o para nova an√°lise
            if st.button("üîÑ Fazer Nova An√°lise", type="secondary"):
                st.session_state.executar_analise = False
                st.rerun()
        
        # Limpar flag de execu√ß√£o
        st.session_state.executar_analise = False
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; color: #666; padding: 2rem;">
        <p>ü§ñ Desenvolvido com Google Gemini AI Agents | 
        üí´ Sua jornada de autoconhecimento come√ßa aqui</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()